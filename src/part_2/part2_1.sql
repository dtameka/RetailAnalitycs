CREATE TABLE IF NOT EXISTS segment_table (
    id bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    average varchar NOT NULL,
    frequency varchar NOT NULL,
    churn varchar NOT NULL
);
------------------------------------------------------------------------------
INSERT INTO segment_table (id, average, frequency, churn) 
VALUES (1, 'Низкий', 'Редко', 'Низкая'), (2, 'Низкий', 'Редко', 'Средняя'),
(3, 'Низкий', 'Редко',  'Высокая'), (4, 'Низкий', 'Средне', 'Низкая'),
(5, 'Низкий', 'Средне', 'Средняя'), (6, 'Низкий', 'Средне', 'Высокая'),
(7, 'Низкий', 'Часто',  'Низкая'), (8, 'Низкий', 'Часто',  'Средняя'),
(9, 'Низкий', 'Часто',  'Высокая'), (10, 'Средний', 'Редко', 'Низкая'),
(11, 'Средний', 'Редко', 'Средняя'), (12, 'Средний', 'Редко', 'Высокая'),
(13, 'Средний', 'Средне','Низкая'), (14, 'Средний', 'Средне','Средняя'),
(15, 'Средний', 'Средне','Высокая'), (16, 'Средний', 'Часто', 'Низкая'),
(17, 'Средний', 'Часто', 'Средняя'), (18, 'Средний', 'Часто', 'Высокая'),
(19, 'Высокий', 'Редко', 'Низкая'), (20, 'Высокий', 'Редко', 'Средняя'),
(21, 'Высокий', 'Редко', 'Высокая'), (22, 'Высокий', 'Средне','Низкая'),
(23, 'Высокий', 'Средне','Средняя'), (24, 'Высокий', 'Средне','Высокая'),
(25, 'Высокий', 'Часто', 'Низкая'), (26, 'Высокий', 'Часто', 'Средняя'),
(27, 'Высокий', 'Часто', 'Высокая');
------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fnc_find_customer_segment(average_segment varchar,
                                                frequency_segment varchar,
                                                churn_segment varchar)
RETURNS int
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN
        (SELECT id FROM segment_table
        WHERE average = average_segment
        AND frequency = frequency_segment
        AND churn = churn_segment);
    END;
$$;
------------------------------------------------------------------------------

CREATE OR REPLACE VIEW customer_support_view AS
SELECT p_info.customer_id, customer_name, customer_surname,
customer_primary_email, customer_primary_phone,
cards.customer_card_id, trans.transaction_id, transaction_summ,
transaction_datetime, transaction_store_id, checks.sku_id,
sku_amount, sku_summ, sku_summ_paid, sku_discount
FROM personalinfo AS p_info 
JOIN cards ON p_info.customer_id = cards.customer_id
JOIN transactions AS trans ON cards.customer_card_id = trans.customer_card_id
JOIN checks ON trans.transaction_id = checks.transaction_id;

DROP VIEW IF EXISTS Customers;
CREATE OR REPLACE VIEW Customers AS
WITH main_data AS (  
    SELECT customer_id, transaction_datetime, transaction_store_id,
    avg(transaction_summ) OVER w 
    AS "customer_average_check",
    EXTRACT(epoch FROM (max(transaction_datetime) OVER w - min(transaction_datetime) OVER w)) / 86400.0 /
    count(transaction_id) OVER w 
    AS "customer_frequency",
    EXTRACT(epoch FROM ((SELECT * FROM dateofanalysisformation) - max(transaction_datetime) OVER w)) / 86400.0
    AS "customer_inactive_period",
    count(transaction_id) OVER (PARTITION BY customer_id, transaction_store_id ) AS total_transaction,
    rank() OVER (PARTITION BY customer_id ORDER BY transaction_datetime DESC) AS rank_transaction,
    lag("transaction_store_id") OVER (PARTITION BY customer_id ORDER BY "transaction_datetime") AS store_id,
    lag("transaction_store_id", 2) OVER (PARTITION BY customer_id ORDER BY "transaction_datetime") AS store_id2,
    cume_dist() OVER (ORDER BY "customer_id", "transaction_store_id") AS top_transaction
    FROM customer_support_view
    WINDOW w AS (PARTITION BY customer_id)
  ), dedublicate_data AS ( 
    SELECT *,  max("transaction_store_id") OVER (PARTITION BY "customer_id" ORDER BY "transaction_datetime" DESC,
                     top_transaction DESC) AS store_with_largest_all_transactions 
    FROM main_data
    WHERE rank_transaction = 1
  ), segment_assignment AS (
    SELECT *,
    CASE
        WHEN row_number() OVER (ORDER BY "customer_average_check" DESC) <= 
            (SELECT count(DISTINCT "customer_id") FROM dedublicate_data) * 0.1
            THEN 'Высокий'
        WHEN row_number() OVER (ORDER BY "customer_average_check" DESC) <=
            (SELECT count(DISTINCT "customer_id") FROM dedublicate_data)* 0.35
            THEN 'Средний'
        ELSE 'Низкий'
    END AS "customer_average_check_segment",

    CASE
        WHEN row_number() OVER (ORDER BY "customer_frequency") <=
            (SELECT count(DISTINCT "customer_id") FROM dedublicate_data) * 0.1
            THEN 'Часто'
        WHEN row_number() OVER (ORDER BY "customer_frequency") <=
            (SELECT count(DISTINCT "customer_id") FROM dedublicate_data) * 0.35
            THEN 'Средне'
        ELSE 'Редко'
    END AS "customer_frequency_segment",

    CASE
        WHEN ("customer_inactive_period" / "customer_frequency") <= 2 THEN 'Низкая'
        WHEN ("customer_inactive_period" / "customer_frequency") <= 5 THEN 'Средняя'
        ELSE 'Высокая'
    END  AS "customer_churn_segment",

    "customer_inactive_period" / "customer_frequency" AS "customer_churn_rate"

    FROM dedublicate_data
), find_main_store AS  (
    SELECT *, 
    CASE
        WHEN "transaction_store_id" = store_id AND store_id = store_id2 
        THEN "transaction_store_id"
        ELSE "store_with_largest_all_transactions"
    END AS "Customer_Primary_Store"
    FROM segment_assignment
), result_data AS (
    SELECT 
    customer_id AS "Customer_ID",
    customer_average_check AS "Customer_Average_Check",
    customer_average_check_segment AS "Customer_Average_Check_Segment",
    customer_frequency AS "Customer_Frequency",
    customer_frequency_segment AS "Customer_Frequency_Segment",
    customer_inactive_period AS "Customer_Inactive_Period",
    customer_churn_rate AS "Customer_Churn_Rate",
    customer_churn_segment AS "Customer_Churn_Segment",
    fnc_find_customer_segment(customer_average_check_segment, customer_frequency_segment, customer_churn_segment)
    AS "Customer_Segment",
    "Customer_Primary_Store"

    FROM find_main_store
) SELECT * from result_data order by 1;


------------------------------------------------------------------------------
--check
SELECT * FROM Customers;